{{template "base" .}}

{{define "css"}}
    <style>
        .card {
            max-width: 740px;
            margin: 0 auto;
            padding: 10px 30px;
            border: 1px solid #ccc;
            margin-top: 80px;
            /* background-color: #e9ecef; */
        }
        .card-header {
            background-color: #fff;
        }

        #card-messages {
            position: fixed;
            top: 0;
            right: 0;
            width: 300px;
            padding: 10px;
            margin: 10px;
            border-radius: 5px;
            color: #fff;
            font-size: 16px;
            font-weight: 600;
            text-align: center;
        }
    </style>
{{end}}

{{define "title"}}
    Plano Premium
{{end}}

{{define "content"}} 
{{$widget := index .Data "widget"}}
    
    <div id="card-messages"></div>

    <div class="card">
        <div class="card-header">
            <h2 class="text-center">{{$widget.Name}} {{formatCurrency $widget.Price}}</h2>
        </div>
        <div class="card-body">
            
            <form action="/payment-succeeded" method="post" name="charge_form" id="charge_form" class="d-block needs-validations charge-form" autocomplete="off" novalidate="">

                <input type="hidden" name="product_id" id="product_id" value="{{$widget.ID}}">
                <input type="hidden" name="amount" id="amount" value="{{$widget.Price}}">

                <p class="mb-3">{{$widget.Description}}</p>

                <div class="mb-3">
                    <label for="first-name" class="form-label">Nome</label>
                    <input type="text" class="form-control" id="first-name" name="first_name" required autocomplete="first-name-new" placeholder="Jhon">
                </div>

                <div class="mb-3">
                    <label for="last-name" class="form-label">Sobrenome</label>
                    <input type="text" class="form-control" id="last-name" name="last_name" required autocomplete="last-name-new" placeholder="Doe">
                </div>
    
                <div class="mb-3">
                    <label for="cardholder-email" class="form-label">Email</label>
                    <input type="email" class="form-control" id="cardholder-email" name="cardholder_email" required autocomplete="cardholder-email-new" placeholder="jhon@email.com">
                </div>

                <div class="mb-3">
                    <label for="cardholder-name" class="form-label">Nome do titular do cartão</label>
                    <input type="text" class="form-control" id="cardholder-name" name="cardholder_name" required autocomplete="cardholder-name-new" placeholder="jhon S Doe">
                </div>
    
                <div class="mb-3">
                    <label for="card-element" class="form-label">Cartão de Crédito</label>
                    <div id="card-element" class="form-control"></div>
                    <div class="alert-danger text-center" id="card-errors" role="alert"></div>
                    <div class="alert-success text-center" id="card-success" role="alert"></div>
                </div>
    
                <hr />
    
                <a id="pay-button" href="javascript:void(0)" class="btn btn-primary" onclick="val()">
                    Assinar {{formatCurrency $widget.Price}}/mês
                </a>
                
                <div id="processing-payment" class="text-center d-none">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Processando...</span>
                    </div>
                </div>
    
                <input type="hidden" name="payment_intent" id="payment_intent">
                <input type="hidden" name="payment_method" id="payment_method">
                <input type="hidden" name="payment_amount" id="payment_amount">
                <input type="hidden" name="payment_currency" id="payment_currency">
            </form>
        </div>
    </div>
{{end}}

{{define "js"}}
{{$widget := index .Data "widget"}}

<script src="https://js.stripe.com/v3/"></script>

<script>
    let card;
    let stripe;

    const cardMessages = document.getElementById('card-messages');
    const payButton = document.getElementById('pay-button');
    const processing = document.getElementById('processing-payment');

    stripe = Stripe('{{.StripePublishableKey}}')
   
    function hidePayButton() {
        payButton.classList.add('d-none');
        processing.classList.remove('d-none');
    }

    function showPayButton() {
        payButton.classList.remove('d-none');
        processing.classList.add('d-none');
    }

    function showCardError(msg) {
        cardMessages.classList.remove('alert-success');
        cardMessages.classList.add('alert-danger');
        cardMessages.textContent = msg;
        cardMessages.classList.remove('d-none');

        setTimeout(() => {
            cardMessages.classList.add('d-none');
            document.getElementById('card-success').classList.add('d-none');
        }, 5000);
    }

    function showCardSuccess() {
        cardMessages.classList.remove('alert-danger');
        cardMessages.classList.add('alert-success');
        cardMessages.textContent = 'Pagamento realizado com sucesso!';
        cardMessages.classList.remove('d-none');

        setTimeout(() => {
            cardMessages.classList.add('d-none');
            document.getElementById('card-success').classList.add('d-none');
        }, 5000);
    }

    function val() {
        let form = document.getElementById('charge_form');
        if (form.checkValidity() === false) {
            this.event.preventDefault();
            this.event.stopPropagation();
            form.classList.add('was-validated');
            return;
        }

        form.classList.add('was-validated');
        hidePayButton();

        let amountToChange = document.getElementById('amount').value;

        stripe.createPaymentMethod({
            type: 'card',
            card: card,
            billing_details: {
                email: document.getElementById('cardholder-email').value
            }
        }).then(stripePaymentMethodHandler);
    }

    function stripePaymentMethodHandler(result) {
        if (result.error) {
            showCardError(result.error.message);
            showPayButton();
        } else {
            // create a customer and subscribe to plan
            let payload = {
                plan: '{{$widget.PlanID}}',
                payment_method: result.paymentMethod.id,
                last_four: result.paymentMethod.card.last4,
                card_brand: result.paymentMethod.card.brand,
                expiry_month: result.paymentMethod.card.exp_month,
                expiry_year: result.paymentMethod.card.exp_year,
                email: document.getElementById('cardholder-email').value,
                product_id: document.getElementById('product_id').value,
                first_name: document.getElementById('first-name').value,
                last_name: document.getElementById('last-name').value,
                amount: document.getElementById('amount').value,
            }

            const requestOptions = {
                method: 'POST',
                headers: { 'Accept': 'application/json', 'Content-Type': 'application/json' },
                body: JSON.stringify(payload)
            }

            fetch('{{.API}}' + "/create-customer-and-subscribe-to-plan", requestOptions)
                .then(response => response.json())
                .then(data => {
                    console.log(data);
                    processing.classList.add('d-none');
                    // set hidden vars
                    // submit form
                })
        }
    }

    (function() {
        const elements = stripe.elements();
        const style = {
            base: {
                fontSize: '16px',
                lineHeight: '24px'
            }
        };

        card = elements.create('card', { style: style, hidePostalCode: true });
        card.mount('#card-element');

        card.addEventListener('change', function(event) {
            const displayError = document.getElementById('card-errors');
            const displaySuccess = document.getElementById('card-success');

            if (event.error) {
                displayError.classList.remove('d-none');
                displayError.textContent = event.error.message;
                displaySuccess.classList.add('d-none');
            } else {
                displayError.classList.add('d-none');
                displaySuccess.textContent = 'Cartão válido';
            }
        });
    })()
</script>

{{end}}