{{template "base" .}}

{{define "css"}}
    <style>
        #form-container {
            max-width: 500px;
            margin: 0 auto;
            padding: 10px 30px;
            border: 1px solid #ccc;
            margin-top: 80px;
            background-color: #e9ecef;
        }

        #form-container h2,
        #form-container form label {
            font-weight: 600;
        }

        #card-messages {
            position: fixed;
            top: 0;
            right: 0;
            /* z-index: 9999; */
            width: 300px;
            padding: 10px;
            margin: 10px;
            border-radius: 5px;
            color: #fff;
            font-size: 16px;
            font-weight: 600;
            text-align: center;
        }
    </style>
{{end}}

{{define "title"}}
    Terminal virtual
{{end}}

{{define "content"}}
    <div id="card-messages"></div>

    <div id="form-container">
        <h2 class="mt-3 text-center">Terminal virtual</h2>
        <hr />

        <form action="" method="post" name="charge_form" id="charge_form" class="d-block needs-validations charge-form" autocomplete="off" novalidate="">
            <div class="mb-3">
                <label for="charge_amount" class="form-label">Valor</label>
                <input type="text" class="form-control" id="charge_amount" required autocomplete="charge_amount-new" placeholder="R$ 100.00">
            </div>

            <div class="mb-3">
                <label for="cardholder-name" class="form-label">Nome do titular do cartão</label>
                <input type="text" class="form-control" id="cardholder-name" name="cardholder_name" required autocomplete="cardholder-name-new" placeholder="Jhon Doe">
            </div>

            <div class="mb-3">
                <label for="cardholder-email" class="form-label">Email do titular do cartão</label>
                <input type="email" class="form-control" id="cardholder-email" name="cardholder_email" required autocomplete="cardholder-email-new" placeholder="jhon@email.com">
            </div>

            <div class="mb-3">
                <label for="card-element" class="form-label">Cartão de Crédito</label>
                <div id="card-element" class="form-control"></div>
                <div class="alert-danger text-center" id="card-errors" role="alert"></div>
                <div class="alert-success text-center" id="card-success" role="alert"></div>
            </div>

            <hr />

            <a id="pay-button" href="javascript:void(0)" class="btn btn-primary" onclick="val()">Pagar</a>
            
            <div id="processing-payment" class="text-center d-none">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Processando...</span>
                </div>
            </div>

            <input type="hidden" name="amount" id="amount">
            <input type="hidden" name="payment_intent" id="payment_intent">
            <input type="hidden" name="payment_method" id="payment_method">
            <input type="hidden" name="payment_amount" id="payment_amount">
            <input type="hidden" name="payment_currency" id="payment_currency">
        </form>
    </div>

    <div class="row">
        <div class="col-md-6 offset-md-3 d-none" id="receipt">
            <h3 class="mt-3 text-center">Recebido</h3>
            <hr>
            <p>
                <strong>Código do banco</strong>: <span id="bank-return-code"></span>
            </p>
            <p>
                <a href="/admin/virtual-terminal" class="btn btn-primary">Cobrar outro cartão</a>
            </p>
        </div>
    </div>
{{end}}

{{define "js"}}
<script>
    checkAuth();
    
    document.getElementById('charge_amount').addEventListener('change', changeAmount);

    function changeAmount(evt) {
        if (evt.target.value !== "") {
           document.getElementById("amount").value = parseInt((evt.target.value * 100), 10); 
        } else {
            document.getElementById("amount").value = 0;
        }
    }
</script>

<script src="https://js.stripe.com/v3/"></script>

<script>
    let card;
    let stripe;

    const cardMessages = document.getElementById('card-messages');
    const payButton = document.getElementById('pay-button');
    const processing = document.getElementById('processing-payment');

    stripe = Stripe('{{.StripePublishableKey}}')
   
    function hidePayButton() {
        payButton.classList.add('d-none');
        processing.classList.remove('d-none');
    }

    function showPayButton() {
        payButton.classList.remove('d-none');
        processing.classList.add('d-none');
    }

    function showCardError(msg) {
        cardMessages.classList.remove('alert-success');
        cardMessages.classList.add('alert-danger');
        cardMessages.textContent = msg;
        cardMessages.classList.remove('d-none');

        setTimeout(() => {
            cardMessages.classList.add('d-none');
            document.getElementById('card-success').classList.add('d-none');
        }, 5000);
    }

    function showCardSuccess() {
        cardMessages.classList.remove('alert-danger');
        cardMessages.classList.add('alert-success');
        cardMessages.textContent = 'Pagamento realizado com sucesso!';
        cardMessages.classList.remove('d-none');

        setTimeout(() => {
            cardMessages.classList.add('d-none');
            document.getElementById('card-success').classList.add('d-none');
        }, 5000);
    }
    
    function val() {
        let form = document.getElementById('charge_form');
        if (form.checkValidity() === false) {
            this.event.preventDefault();
            this.event.stopPropagation();
            form.classList.add('was-validated');
            return;
        }

        form.classList.add('was-validated');
        hidePayButton();

        let amountToChange = document.getElementById('amount').value;
        
        let payload = {
            amount: amountToChange,
            currency: 'brl',
        }

        const requestOptions = {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(payload)
        };
        
        fetch('{{.API}}' + "/payment-intent", requestOptions)
            .then(response => response.text())
            .then(response => {
                let data;
                try {
                    data = JSON.parse(response);
                    stripe.confirmCardPayment(data.client_secret, {
                        payment_method: {
                            card: card,
                            billing_details: {
                                name: document.getElementById('cardholder-name').value,
                            }
                        }
                    })
                    .then(function(result) {
                        if (result.error) {
                            // something is wrong
                            showCardError(result.error.message);
                            showPayButton();
                        } else if (result.paymentIntent) {
                            if (result.paymentIntent.status === 'succeeded') {
                                processing.classList.add('d-none');
                                showCardSuccess();

                                // document.getElementById("charge_form").submit();
                                saveTransaction(result);
                            }
                        }
                    })
                } catch (error) {
                    console.log(error);
                    showCardError("Ocorreu um erro ao processar o pagamento.");
                    showPayButton();
                }
            })
    }

    function saveTransaction(result) {
        let payload = {
            amount: parseInt(document.getElementById('amount').value, 10),
            currency: result.paymentIntent.currency,
            first_name: "",
            last_name: "",
            email: document.getElementById('cardholder-email').value,
            payment_intent: result.paymentIntent.id,
            payment_method: result.paymentIntent.payment_method,
        }

        let token = localStorage.getItem("token");

        const requestOptions = {
            method: 'POST',
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json',
                'Authorization': 'Bearer ' + token
            },
            body: JSON.stringify(payload)
        }

        fetch('{{.API}}' + "/admin/virtual-terminal-succeeded", requestOptions)
            .then(response => response.json())
            .then(response => {
                try {
                    console.log(response);
                    processing.classList.add('d-none');
                    document.getElementById('bank-return-code').innerHTML = response.bank_return_code;
                    document.getElementById('receipt').classList.remove('d-none');

                    showCardSuccess();                  
                } catch (error) {
                    console.log(error);
                    showCardError("Ocorreu um erro ao salvar a transação.");
                    showPayButton();
                }
            })
    }

    (function() {
        const elements = stripe.elements();
        const style = {
            base: {
                fontSize: '16px',
                lineHeight: '24px'
            }
        };

        card = elements.create('card', { style: style, hidePostalCode: true });
        card.mount('#card-element');

        card.addEventListener('change', function(event) {
            const displayError = document.getElementById('card-errors');
            const displaySuccess = document.getElementById('card-success');

            if (event.error) {
                displayError.classList.remove('d-none');
                displayError.textContent = event.error.message;
                displaySuccess.classList.add('d-none');
            } else {
                displayError.classList.add('d-none');
                displaySuccess.textContent = 'Cartão válido';
            }
        });
    })()
</script>

{{end}}